"""
Django settings for dev project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = Path(__file__).resolve().parent.parent

# Загружаем переменные из .env файла, если он есть
load_dotenv(BASE_DIR / '.env') # Ищем .env в корне проекта


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',          # Для доступа через http://localhost:8000
    '127.0.0.1',          # Для доступа через http://127.0.0.1:8000
    '.127.0.0.1.nip.io',  # <--- Разрешает ЛЮБОЙ субдомен для 127.0.0.1.nip.io
                           # Точка в начале означает wildcard (любой субдомен)
    # При развертывании на продакшене сюда нужно будет добавить
    # ваш реальный домен, например: '.mydomain.com', 'mydomain.com'
]


# Application definition

SHARED_APPS = [
    'django_tenants',
    'customers',

    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'ninja_extra',
    'ninja_jwt',
    "corsheaders",
    'schema_graph',
    'rest_framework',
    'drf_spectacular',
    
    'users',

]

TENANT_APPS = [
    'django.contrib.admin',
    'roles',
    'crm',
    'logistic',
    'contacts',
]

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

MIDDLEWARE = [
    # 'django_tenants.middleware.main.TenantMainMiddleware', № использовать для идентификации по host/URL
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'users.middleware.TenantIdentificationMiddleware'
]

ROOT_URLCONF = 'dev.urls'


CORS_URLS_REGEX = r"^/api/.*$" # https://pypi.org/project/django-cors-headers/
CORS_ALLOWED_ORIGINS = [

    "http://localhost:3000", # next js
    "http://127.0.0.1:3000", # next js
]

# URL, на который будут перенаправляться пользователи, если они попытаются
# получить доступ к странице, требующей входа (используется LoginRequiredMixin)
LOGIN_URL = 'login' # Используем имя URL-паттерна 'login'

# URL, на который пользователь будет перенаправлен ПОСЛЕ УСПЕШНОГО ВХОДА,
# если в запросе не был указан параметр 'next'.
# Замените 'dashboard' на имя URL вашей основной страницы после входа.
LOGIN_REDIRECT_URL = 'dashboard' # TODO: Замените на имя вашего URL

# URL, на который пользователь будет перенаправлен ПОСЛЕ ВЫХОДА.
# Часто это главная страница или страница входа.
LOGOUT_REDIRECT_URL = 'login' # Перенаправляем обратно на страницу входа

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dev.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'dev' / 'db.sqlite3',
#     }
# }

DB_USER_FROM_ENV = os.getenv('DB_USR')
DB_PASSWORD_FROM_ENV = os.getenv('DB_PSW')

DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend', # Обязательно движок django-tenants
        'NAME': 'django_base',
        'USER': DB_USER_FROM_ENV,
        'PASSWORD': DB_PASSWORD_FROM_ENV,
        'HOST': 'localhost', # <- Правильно для соединения внутри WSL
        'PORT': '5432',      # <- Стандартный порт Postgres
    }
}

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.CustomUser'

TENANT_MODEL = "customers.Client"
TENANT_DOMAIN_MODEL = "customers.Domain"


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
    # другие пути, если необходимо
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# LOGGING = {
#     'version': 1,
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         }
#     },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#         }
#     },
#     'loggers': {
#         'django.db.backends': {
#             'level': 'DEBUG',
#             'handlers': ['console'],
#         }
#     }
# }

REST_FRAMEWORK = {
    # YOUR SETTINGS
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

NINJA_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
}

LOGGING = {
    'version': 1, # Версия схемы конфигурации (обязательно)
    'disable_existing_loggers': False, # Важно оставить False, чтобы не сломать логи Django/сторонних библиотек
    # --- Форматтеры: Определяют, как будет выглядеть сообщение в логе ---
    'formatters': {
        'verbose': { # Подробный формат
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{', # Стиль форматирования (используем f-string стиль)
        },
        'simple': { # Простой формат
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    # --- Обработчики (Handlers): Определяют, КУДА отправлять сообщения ---
    'handlers': {
        'console': { # Имя обработчика для вывода в консоль
            'level': 'DEBUG',       # Минимальный уровень сообщений для ЭТОГО обработчика (можно INFO, WARNING)
            'class': 'logging.StreamHandler', # Класс для вывода в поток (stderr/stdout)
            'formatter': 'simple',  # Имя форматтера, который использовать
        },
        # --- Пример обработчика для записи в файл (раскомментируйте, если нужно) ---
        # 'file_all': {
        #     'level': 'INFO', # Писать INFO и выше в файл
        #     'class': 'logging.FileHandler',
        #     'filename': os.path.join(LOGS_DIR, 'all.log'), # Путь к файлу
        #     'formatter': 'verbose',
        # },
        # 'file_errors': {
        #     'level': 'ERROR', # Писать только ERROR и CRITICAL в отдельный файл
        #     'class': 'logging.FileHandler',
        #     'filename': os.path.join(LOGS_DIR, 'errors.log'),
        #     'formatter': 'verbose',
        # },
    },
    # --- Логгеры: Определяют, сообщения ОТКУДА и с каким уровнем обрабатывать ---
    'loggers': {
        'django': { # Настройка для логгера самого Django
            'handlers': ['console'], # Куда отправлять сообщения от Django
            'level': 'INFO',         # Минимальный уровень для сообщений от Django
            'propagate': True,       # Разрешить передачу сообщений родительским логгерам
        },
        'django.request': { # Логгер для ошибок обработки запросов Django
            'handlers': ['console'], # ['mail_admins'] можно добавить для отправки ошибок на почту
            'level': 'ERROR',
            'propagate': False, # Не передавать выше, чтобы не дублировать
        },
        # --- Пример настройки для конкретного приложения (например, 'crm') ---
        # 'crm': {
        #     'handlers': ['console', 'file_all'], # Отправлять и в консоль, и в файл
        #     'level': 'DEBUG', # Показывать все сообщения от DEBUG и выше для crm
        #     'propagate': False, # Не передавать сообщения от crm в 'root' логгер ниже
        # },
    },
    # --- Корневой логгер (Root Logger) ---
    # Он будет ловить все сообщения, которые не были обработаны специфичными логгерами выше
    # (если у них propagate=True) ИЛИ все сообщения, если специфичные логгеры не настроены.
    'root': {
        'handlers': ['console'], # Указываем обработчик(и) по умолчанию
        'level': 'WARNING',     # Минимальный уровень для ВСЕХ сообщений, не пойманных выше
                                # Если хотите видеть DEBUG/INFO ото всюду, поставьте 'DEBUG'/'INFO'
    },
}